<!DOCTYPE html>
<html lang="ru">

	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
		<title>Система мониторинга</title>
		<link rel="stylesheet" href="/style.css">
	</head>

	<body>
		<style>
			.state_on {
				color: greenyellow;
			}

			.state_off {
				color: red;
			}
		</style>
		<div class="wrapper__1">
			<h2>Система мониторинга систем передачи центра связи (СУС)</h2>
			<form class="search-form" action="" method="GET">
				<div><label hidden for="system-search">Фильтр</label>
					<input placeholder="Поиск..." type="search" name="system-search" id="system-search"
						class="system-search">
				</div>
				<div><input type="checkbox" name="state-on" value="В работе" id="filter-on"> Исправные</div>
				<div><input type="checkbox" name="state-off" value="Авария" id="filter-off"> Неисправные</div>
			</form>
		</div>
		<div class="main">
			<div class="wrapper">
				<div class="table" id="table-systems">
					<div class="table__title">
						<div>№ <br>п/п</div>
						<div>Система передачи</div>
						<div>Приоритет</div>
						<div>Корреспондент</div>
						<div>Тип трассы</div>
						<div>Состояние</div>
					</div>
				</div>
				<div class="popup__bg">
				</div>
			</div>
		</div>
		</div>
		<script>
			////////////////////////////MAIN-start////////////////////////////////////////////////
			window.onload = function () {
				const state = document.querySelectorAll('.state')
				const system = document.querySelectorAll('.table__grid')
				const popupBG = document.querySelector('.popup__bg')
				const form = document.querySelector('.search-form')
				const numbersOfSystems = document.querySelectorAll('.numberSystem')
				const filterOn = document.getElementById('filter-on')
				const filterOff = document.getElementById('filter-off')


				/////////////////////////////////// Обработка Ajax start////////////////////////////////////////
				setInterval(function () {
					getPinInfo();
				}, 2000);
				<!------------------------------------------------------------->
				function getPinInfo() {
					var PinRequest = new XMLHttpRequest();
					PinRequest.onreadystatechange = function () {
						if (this.readyState == 4 && this.status == 200 && this.responseText != null) {



							// тут подставляем данные из полученного от сервера ответа в ДОМ
							let stateN = document.querySelectorAll('.state')
							stateN.forEach((el) => {
								el.innerHTML = this.responseText;
								console.log(this.responseText);//для контроля
							})
						}
					};
					PinRequest.open("GET", "readPinInfo", true);
					PinRequest.send();
				}
				/////////////////////////////////// Обработка Ajax end////////////////////////////////////////

				state.forEach((el) => {
					// Определяет цвет состояния объекта
					if (el.innerHTML == 'Авария') {
						el.classList.add('state_off')
					} else if (el.innerHTML == 'В работе') {
						el.classList.add('state_on')
					}
				})

				function popup() {
					// Отображение и скрытие попапа
					system.forEach((item) => {
						item.addEventListener('click', () => {
							let popup = item.querySelector('.popup')
							popupBG.classList.add('popup__on')
							popup.classList.add('popup__on')
							let popupClose = item.querySelector('.close')
							console.log(popupClose)
							popupClose.addEventListener('click', () => {
								event.stopPropagation() // Запрет всплытия, иначе при нажатии потоврно навешивает класс
								popupBG.classList.remove('popup__on')
								popup.classList.remove('popup__on')
							})
						})
					})
				}

				function filter(ev) {
					ev.preventDefault()
					const input = document.querySelector('#system-search')
					const inputValue = input.value.replace(/\D/g, '') // Получает только цифры введенные в поле поиска
					numbersOfSystems.forEach((item) => {
						let numberSystem = item.innerHTML // Получаем номер системы
						let parentNumber = item.closest('.table__item') // Ищем родителя чтобы скрыть другие
						if (numberSystem.includes(inputValue)) {
							parentNumber.classList.add('.show_search')
							parentNumber.classList.remove('.hidden_search')
						} else {
							parentNumber.classList.add('hidden_search')
							parentNumber.classList.remove('show_search')
						}
					})
				}
				function filterReset() {
					const input = document.querySelector('#system-search')
					numbersOfSystems.forEach((item) => {
						let parentNumber = item.closest('.table__item')
						if ((input.value == null, input.value == '')) {
							parentNumber.classList.remove('hidden_search')
						} else {
							return
						}
					})
				}
				// Фильтры состояния checkbox start
				function filterState() {
					const StateSet = new Set() // Множество для хранения состояния нажатых checkbox
					filterOn.addEventListener('click', () => {
						state.forEach((el) => {
							let parentState = el.closest('.table__item')
							if (filterOn.checked && el.innerHTML == filterOff.value) {
								parentState.classList.add('hidden_check')
								StateSet.add(el.innerHTML)
							} else if (
								filterOn.checked === false &&
								el.innerHTML == filterOff.value
							) {
								parentState.classList.remove('hidden_check')
								StateSet.delete(el.innerHTML)
							}
							if (StateSet.size == 2) { // При одновременном нажатии двух checkbox, сбрасывает их
								state.forEach((el) => {
									let parentState = el.closest('.table__item')
									parentState.classList.remove('hidden_check')
								})
								if (filterOn.checked && filterOff.checked) {
									filterOn.checked = false
									filterOff.checked = false
								}
								StateSet.clear()
							}
						})
					})
					filterOff.addEventListener('click', () => {
						state.forEach((el) => {
							let parentState = el.closest('.table__item')
							if (filterOff.checked && el.innerHTML == filterOn.value) {
								parentState.classList.add('hidden_check')
								StateSet.add(el.innerHTML)
							} else if (
								filterOff.checked === false &&
								el.innerHTML == filterOn.value
							) {
								parentState.classList.remove('hidden_check')
								StateSet.delete(el.innerHTML)
							}
							if (StateSet.size == 2) {
								state.forEach((el) => {
									let parentState = el.closest('.table__item')
									parentState.classList.remove('hidden_check')
								})
								if (filterOn.checked && filterOff.checked) {
									filterOn.checked = false
									filterOff.checked = false
								}
								StateSet.clear()
							}
						})
					})
				}
				// Фильтры состояния checkbox end
				form.addEventListener('keyup', filter)
				form.addEventListener('keyup', filterReset)
				filterState()
				popup()
			}
			////////////////////////////MAIN-end////////////////////////////////////////////////



			///////////////////////////RENDER_SISTEMS-start/////////////////////////////////////
			const systemsContainer = document.querySelector('#table-systems')

			getSystems()

			async function getSystems() {
				//получаем массив из json в котором мы определили массив
				//обязательно через await,необходимо достоверно получить данные
				const response = await fetch('/sis.xml')
				//присваиваем значение массива переменной
				const systemsArray = await response.json()
				//теперь передаем этоту переменную с массивом в другую функцию
				renderSystems(systemsArray)
			}

			function renderSystems(systemsArray) {
				//перебираем все элементы в массиве и вставляем их в шаблон
				systemsArray.forEach(function (item) {
					const systemHTML = `<div class="table__grid">
						<div class="table__item">
						<div class="row-number"></div>
						<div class="numberSystem">${item.numberSystem}</div>
						<div>${item.priority}</div>
						<div>${item.correspondent}</div>
						<div>${item.type}</div>
						<div class="state">${item.state}</div>
					</div>
					<div class="popup__wrapper">
						<div class="popup">
							<div class="close">
								<a class="close__img">
									<img src="/close.png" alt="" / style="width:23px;height:23px;transition:0.4s;">
									<style>
									.close__img>img:hover{
										transform:rotate(360deg);
										transition:0.4s;
									}
									</style>
								</a>
							</div>
							<div class="popup__content">
								<div>Трасса: 
								${item.cor1}
								${item.SL1}
								${item.cor2}
								${item.SL2}
								${item.cor3}
								${item.SL3}
								${item.cor4}																
								</div>
								<div class="popup__content-down">
								<div>Загрузка: 
																							
								</div>
								<div class="popup__state"> Состояние: ${item.state} </div
								</div>
							</div>
						</div>	
					</div>			
					</div>`
					//вставляем шаблон в страницу(отрисовываем)
					systemsContainer.insertAdjacentHTML('beforeend', systemHTML)
				})
			}
			///////////////////////////RENDER_SISTEMS-end/////////////////////////////////////
		</script>
	</body>

</html>