<!DOCTYPE html>
<html lang="ru">

	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
		<title>Система мониторинга</title>
		<link rel="stylesheet" href="/style.css">
	</head>

	<body>
		<div id="p_preloader" class="preloader">
			<div class="preloader__percent"></div>
			<div class="load">
				<div class="inload">
					</div>
				</div>
			</div>
		</div>
		<div class="wrapper__1">
			<h2>Система мониторинга систем передачи центра связи (СУС)</h2>
			<form class="search-form" action="" method="GET">
				<div><label hidden for="system-search">Фильтр</label>
					<input placeholder="Поиск..." type="search" name="system-search" id="system-search"
						class="system-search">
				</div>
				<div class="checkbox">
					<div class="checkbox__wrap">
						<div class="toggle-pill-dark">
							<input type="checkbox" id="filter-on" name="state-on" value="В работе">
							<label for="filter-on"></label>
						</div>
						<div class="checkbox__name">Исправные</div>
					</div>
					<div class="checkbox__wrap">
						<div class="toggle-pill-dark">
							<input type="checkbox" id="filter-off" name="state-off" value="Авария">
							<label for="filter-off"></label>
						</div>
						<div class="checkbox__name">Неисправные</div>
					</div>
				</div>
				
				<!-- <div><input type="checkbox" name="state-on" value="В работе" id="filter-on"> Исправные</div>
				<div><input type="checkbox" name="state-off" value="Авария" id="filter-off"> Неисправные</div> -->
			</form>
		</div>
		<div class="main">
			<div class="wrapper">
				<div class="table" id="table-systems">
					<div class="table__title">
						<div>№ <br>п/п</div>
						<div>Система передачи</div>
						<div>Приоритет</div>
						<div>Корреспондент</div>
						<div>Тип трассы</div>
						<div>Состояние</div>
					</div>
				</div>
				<div class="popup__bg">
				</div>
			</div>
		</div>
		</div>
		<script>
			////////////////////////////MAIN-start////////////////////////////////////////////////
			
			const preloaderPercent = document.querySelector('.preloader__percent')
				const loadTime = 36
				let percentCounter = 0
				const perc = setInterval(() => {
				percForSecond = Number((100 / loadTime).toFixed(2))
				preloaderPercent.innerText = Number(percentCounter).toFixed(2) + "%"
				percentCounter += percForSecond
				if(percentCounter >= 97){
					preloaderPercent.innerText = 100 + "%"
				}else if (percentCounter >= 100){
					clearInterval(perc)
				}
			},  1000 )



			window.onload = function () {
				load();

				const state = document.querySelectorAll('.state')
				const system = document.querySelectorAll('.table__grid')
				const correspondents = document.querySelectorAll('.correspondent')
				const popupState = document.querySelectorAll('.popup__state')
				const popupBG = document.querySelector('.popup__bg')
				const form = document.querySelector('.search-form')
				const numbersOfSystems = document.querySelectorAll('.numberSystem')
				const filterOn = document.getElementById('filter-on')
				const filterOff = document.getElementById('filter-off')
				const systemActive = new Set()
				const systemNonActive = new Set()




				
				




				/////////////////////////////////// Обработка Ajax start////////////////////////////////////////
				setInterval(function () {
					getPinInfo();
				}, 2000);

				function getPinInfo() {
					var PinRequest = new XMLHttpRequest();
					PinRequest.onreadystatechange = function () {
						if (this.readyState == 4 && this.status == 200 && this.responseText != null) {

							stateArray = [];			// В этот массив передаются данные о состоянии пинов
							stateArray += this.responseText;
							numbersOfSystems.forEach((el, index, arr) => {
								let systemRow = el.closest('.table__item');
								let systemState = systemRow.querySelector('.state');
								if (stateArray[index] == 0) {
									systemActive.add(el)
									systemState.innerText = 'В работе';
									systemState.classList.remove('state_on')
									systemState.classList.remove('state_off')
									systemState.classList.add('state_on')
								} else if (stateArray[index] == 1) {
									systemNonActive.add(el);
									systemState.innerText = 'Авария';
									systemState.classList.remove('state_on')
									systemState.classList.remove('state_off')
									systemState.classList.add('state_off')
								}
							});
							popupState.forEach((el, index, arr) => {
								if (stateArray[index] == 0) {
									el.innerText = 'В работе';
									el.classList.remove('state_on')
									el.classList.remove('state_off')
									el.classList.add('state_on')
								} else if (stateArray[index] == 1) {
									el.innerText = 'Авария';
									el.classList.remove('state_on')
									el.classList.remove('state_off')
									el.classList.add('state_off')
								}
							});
							console.log(systemActive);
							console.log(systemNonActive);
						}
					};
					PinRequest.open("GET", "readPinInfo", true);
					PinRequest.send();
					filterState();
					systemActive.clear()
					systemNonActive.clear()
				}
				/////////////////////////////////// Обработка Ajax end////////////////////////////////////////

				////////////////////////////////////// Popup start///////////////////////////////////////////
				function popup() {
					// Отображение и скрытие попапа
					system.forEach((item) => {
						item.addEventListener('click', () => {
							let popup = item.querySelector('.popup')
							popupBG.classList.add('popup__on')
							popup.classList.add('popup__on')
							let popupClose = item.querySelector('.close')

							popupClose.addEventListener('click', (event) => {
								event.stopPropagation() // Запрет всплытия, иначе при нажатии потоврно навешивает класс
								popupBG.classList.remove('popup__on')
								popup.classList.remove('popup__on')
							})
						})
					})
				}
				/////////////////////////////////////// Popup end////////////////////////////////////////////

				////////////////////////////////////// Filters start///////////////////////////////////////////
				function filter(ev) {
					ev.preventDefault()
					const input = document.querySelector('#system-search')
					console.log(input.value);
					console.log(input.value.toLowerCase());
					if(Number(input.value)){
						console.log(input.value);
						let inputValue = input.value.replace(/\D/g, '') // Получает только цифры введенные в поле поиска
						console.log(inputValue);
						numbersOfSystems.forEach((item) => {
						let numberSystem = item.innerHTML // Получаем номер системы
						let parentNumber = item.closest('.table__grid') // Ищем родителя чтобы скрыть другие
						if (numberSystem.includes(inputValue)) {
							parentNumber.classList.add('.show_search')
							parentNumber.classList.remove('.hidden_search')
						} else {
							parentNumber.classList.add('hidden_search')
							parentNumber.classList.remove('show_search')
						}
						})
					}else{
						console.log(input.value);
						let inputValue = input.value.replace(/\d/g, '') // Получает только цифры введенные в поле поиска
						console.log(inputValue);
						correspondents.forEach((item) => {
						let correspondent = item.innerHTML.toLowerCase() // Получаем корреспондента
						let parentCorrespondent = item.closest('.table__grid') // Ищем родителя чтобы скрыть другие
						if (correspondent.includes(inputValue.toLowerCase())) {
							parentCorrespondent.classList.add('.show_search')
							parentCorrespondent.classList.remove('.hidden_search')
						} else {
							parentCorrespondent.classList.add('hidden_search')
							parentCorrespondent.classList.remove('show_search')
							}
						})
					}
				}
				function filterReset() {
					const input = document.querySelector('#system-search')
					numbersOfSystems.forEach((item) => {
						let parentNumber = item.closest('.table__grid')
						if ((input.value == null, input.value == '')) {
							parentNumber.classList.remove('hidden_search')
						} else {
							return
						}
					})
					correspondents.forEach((item) => {
						let parentNumber = item.closest('.table__grid')
						if ((input.value == null, input.value == '')) {
							parentNumber.classList.remove('hidden_search')
						} else {
							return
						}
					})
				}
////////////////////////////////////////////// Фильтры состояния checkbox start///////////////////////////////
				function filterState() {

					//Когда идут реквесты, каждый раз сбрасывает все классы
					//И в зависимости от нажатой кнопки скрывает ненужное

					const StateSet = new Set() // Множество для хранения состояния нажатых checkbox
					if(filterOn.checked){				
							system.forEach((e) =>{
							e.classList.remove('hidden_check')
						})
					}else if(filterOff.checked){		
							system.forEach((e) =>{
							e.classList.remove('hidden_check')
						})
					}	
					if(filterOn.checked){
						systemNonActive.forEach((el) => {
							let parentState = el.closest('.table__grid')
							console.log(parentState);
							parentState.classList.add('hidden_check')
						})
					}
					if(filterOff.checked){
						systemActive.forEach((el) => {
							let parentState = el.closest('.table__grid')
							console.log(parentState);
							parentState.classList.add('hidden_check')
						})
					}

					//Здесь все завязано на кнопку "В работе", в соответствии с нажатой кнопкой скрывает ненужное
					//Когда отжал кнопку, возвращает

					filterOn.addEventListener('click', () => {
						system.forEach((e) =>{
							e.classList.remove('hidden_check')
						})
						systemNonActive.forEach((el) => {
							let parentState = el.closest('.table__grid')
							if(filterOn.checked){
								console.log(parentState);
								parentState.classList.add('hidden_check')
								StateSet.add(1)   			//при нажатии на On добавляем 1 в множество
							}else if (filterOn.checked === false){
								console.log(parentState);
								parentState.classList.remove('hidden_check')
								StateSet.delete(1)			//при отжатии убираем 1 из множестваа
							}							
							if (StateSet.size == 2) { // При одновременном нажатии двух checkbox, сбрасывает их
								system.forEach((el) => {
									let parentState = el.closest('.table__grid')
									parentState.classList.remove('hidden_check')
								})
								if (filterOn.checked && filterOff.checked) {
									filterOn.checked = false
									filterOff.checked = false
								}
								StateSet.clear()
							}
						})
					})
					//Здесь все завязано на кнопку "Авария", в соответствии с нажатой кнопкой скрывает ненужное
					//Когда отжал кнопку, возвращает
					filterOff.addEventListener('click', () => {
						system.forEach((e) =>{
							e.classList.remove('hidden_check')
						})
						systemActive.forEach((el) => {
							let parentState = el.closest('.table__grid')
							if(filterOff.checked){
								console.log(parentState);
								parentState.classList.add('hidden_check')
								StateSet.add(2)
							}else if (filterOff.checked === false){
								console.log(parentState);
								parentState.classList.remove('hidden_check')
								StateSet.delete(2)
							}							
							if (StateSet.size == 2) { // При одновременном нажатии двух checkbox, сбрасывает их
								system.forEach((el) => {
									let parentState = el.closest('.table__grid')
									parentState.classList.remove('hidden_check')
								})
								if (filterOn.checked && filterOff.checked) {
									filterOn.checked = false
									filterOff.checked = false
								}
								StateSet.clear()
							}
						})
					})
				}
////////////////////////////////////////////// Фильтры состояния checkbox end///////////////////////////////
				////////////////////////////////////// Filters end///////////////////////////////////////////

				form.addEventListener('keyup', filter)
				form.addEventListener('keyup', filterReset)

				popup()
			}

			
			
			let preloader = document.querySelector('.preloader')
			function load() {
				preloader.classList.toggle('remove')
				document.querySelector('body').style.overflowX = 'visible'
				document.querySelector('body').style.overflowY = 'visible'
			}
			////////////////////////////MAIN-end////////////////////////////////////////////////



			///////////////////////////RENDER_SYSTEMS-start/////////////////////////////////////
			const systemsContainer = document.querySelector('#table-systems')

			getSystems()

			async function getSystems() {
				//получаем массив из json в котором мы определили массив
				//обязательно через await,необходимо достоверно получить данные
				const response = await fetch('/sis.xml')
				//присваиваем значение массива переменной
				const systemsArray = await response.json()
				//теперь передаем этоту переменную с массивом в другую функцию
				renderSystems(systemsArray)
			}

			function renderSystems(systemsArray) {
				//перебираем все элементы в массиве и вставляем их в шаблон
				systemsArray.forEach(function (item) {
					const systemHTML = `<div class="table__grid">
						<div class="table__item">
						<div class="row-number"></div>
						<div class="numberSystem">${item.numberSystem}</div>
						<div>${item.priority}</div>
						<div class="correspondent">${item.correspondent}</div>
						<div>${item.type}</div>
						<div class="state"></div>
					</div>
					<div class="popup__wrapper">
						<div class="popup">
							<div class="close">
								<a class="close__img">
									<img src="/close.png" alt="" / style="width:23px;height:23px;transition:0.4s;">
									<style>
									.close__img>img:hover{
										transform:rotate(360deg);
										transition:0.4s;
									}
									</style>
								</a>
							</div>
							<div class="popup__content">
								<div>Трасса: 
								${item.trace}																
								</div>
								<div class="popup__content-down">
								<div>Загрузка: 
																							
								</div>
								<div class="popup__state"> Состояние: </div
								</div>
							</div>
						</div>	
					</div>			
					</div>`
					//вставляем шаблон в страницу(отрисовываем)
					systemsContainer.insertAdjacentHTML('beforeend', systemHTML)
				})
			}
			///////////////////////////RENDER_SYSTEMS-end/////////////////////////////////////
		</script>
	</body>

</html>